import base64
x=('''import base64
x=('''aW1wb3J0IGJhc2U2NAp4PSgnJydhVzF3YjNKMElHSmhjMlUyTkFwNFBTZ25KeWRoVnpGM1lqTktNRWxIU21oak1sVXlUa0Z3TkZCVFoybFpWbU40WkRKSmVsTnFRa3BTTUhCdldYcEtWazFyTlVKalJGSlJWVEprY0ZVeGFITlNiVkowVld4c1ZXSnRlRTVVVjNSM1pERnNkR0Y2Vm10TmJGcGFWbGN3TldGVk1YRlZhbHBTVFcxNFQxcEZWalJXUlRGSlZXc3hWbVZyU1hkV1JWcE9aREpTUm1WR1VrNVRSa3BPVmxod1EwMUdVa2RVV0dSclVsaG9WVlJWYUZOVVZsWTJVV3BDVlZKck1UTmFSVlkwVmtVeFNWVnJNVlpsYTBsM1ZrVmFUbVF5VWtaVWJrSlZWa2Q0UzFWVVFrZGliRTVXVkd0S1lVMUhlRVZWVm1SclUyeEZkMU5yVmxwaGEwcFVXV3RhUjA1V1JuSlViWGhXVFVWd1ZsWXhXbGRWTVdSR1lrVlNVbFl5VWt0VlZFSkhZbXhPVmxSclNtRk5SM2hHVkZWa2QxSkhSbFpOVkVKVlVtc3hNMXBGVmpSV1JURkpWV3N4Vm1WclNYZFdSVnBPWkRKU1JtVkdVazVUUmtwT1ZsaHdRMDFHVWtkVVdHUnJVbGhvVlZSVmFGTlVWbFkyVVdwQ1ZWSnJNVE5hUlZZMFZrVXhTVlZyTVZabGEwbDNWVlJKZUdNeVVraFVhMmhRVjBkNGNsVlVRa3RrTVhCR1drWmtiRll4U2tsVU1XaGhZVlpPUmsxVmVGaGlWRlpNV2tjeFMxWkdSblZYYlhCc1ZsVndNMWRYZUc5Uk1sSjBWRzVXVmxZeVVuQlpiRlpoVFVaa2MxUnJTbXBOUjNoS1ZrZHdWMkZyTUhoVGJrNWFZa1ZhTTFwWE1WZFhWbEp4VVcxR1YyVnJTakpWTW5CUFVUSk9TRlJyVmxWV01sSnZWbTV3VjA1c2NFWmFSV1JxVFd0d1JWVldhRk5VVm1SSFYycE9XR0ZyTlV4WlZWcDNVMFphV0ZwSGNGTk5ibWQ2VlRJMWMyTnNUWGxVV0hCcFUwaENjbFZxUm1GTlJrMTNWRzEwYTAxcldscFZWbWgzVTJ4SmVXVkVSbHBsYXpWVVdWVmtTMU5IVVhsYVJuQk9ZVzE0TmxkWGNFOVRNa1pJVTJ4b1UxWjZWazFXVm1oRFRteHdWMkZGT1U1U2JrSlpWRlZqTlZNd01YSk9XSEJZWWtkU1NGcFdWbmRPVjBWM1pFZG9WMlZyV1hwWFYzQlBVekF4Um1KRmJGVmhiRnB4V2xaV1IyVnNjRVphU0U1clVtNUNVMWt3WTNoaGJVcFZZa1JDVkZaWFVsQmFSekZMVTBVNVdXSkdjRmRsYTFwMlZURldhMk15VWtoVWEyaFFWMGQ0Y2xWVVFrdFRSbXh4Vkd0MGFWSllhRWhXUjNCRFlrWlplbUZJVGxWU1ZscE1XVlZhY21WWFRYZGtSMFpwWVROQmVWZFhlRTlSTURGSVVteG9UbFl6YUV0VmFrbzBUVVpyZDFsNlZteFdNVXBGVlZjMWQyRldTWGhYYms1YVRVVmFNMWxVUm5kWFJtUllXa2QwVkZJelozcFhWbHBxVFZkS2MxWnJiRlJpYTBwd1dXMTRSMlJzY0VaYVJtUlBVakZLUlZsWWNHRlNSMFpXVW0wMVZGWlZOVVJaYkdSS1pXeE9XRnBHY0U1aVYyaDJWMVJKZUZJeVJuUlZhMmhYWW0xNFMxVnFTalJOVms1V1lVWk9hVkl4V2twV1ZsSmhVa2RHVmxKdE5WUldWVFZEVjJwQ2MxSkdSbGhhUjNCT1RXNW5NbFpGWXpGVU1ERkhZMFZvVUZaRlduSlZXSEJXWld4cmVVMVlUazVTYmtKVldWVmtkMkZHU1hkWGFsWllWbTFTVUZSVlduZFhWazVaVVd0U2FGWlZXblZWTVZaUFVXeHZkMkpGVWxKV01sSnhWRlJLTkU1c1VraE9WVGxPVW01Q1NWUXhVa2RoTVVZMlZtNVNXbUV5YUZoYVZ6RkhVa1p2ZWxGclVtaFdWVnAxVlRGV1QxRnNiM2RpUlZKU1ZqSlNjbFZxU2pSTlJtUnpWRlJHYkdKVmNFbFdiVEUwWVd4RmVWcEVUbFZTTTBKRFdsVlZlRlpIUlhka1JWSnBWbXR3ZWxZeU1YTlJNREZJVm14c1VtSnJTbkJaYkdSVFV6RnNkRTVWVGs1V01VcEZXVlZTUTFsV1pFaGFNMlJVVFZaS01sVjZRbk5TUmtaMFRWZHNUazFIZUhWV01WSkxZakpHU0ZSdVVsTmlXRUp5VldwR1lVNVdUbFphU0U1clZsZDRTbFpYTVRSaVJrNUhVbFJLVWsxdGVFTlhha0p6VWtaR2RXTkhlRmhTVkVWNFYxaHdUMVV5UlhsVFdIQlhZV3RLVGxsdE1WTk9WbXhYWVVaT2FWSllVa2xXUnpBMVYyeGtSbU5IT1ZoV1JUVlVXV3RrVDJOSFJYZGtSWEJTVFVWYWRWVXhWbTlVTURWWVZHcFdUMWRJUW5KVmFrWkxUV3h3UjJGR1NtdFdia0l3V2xWU1IyRnJNWFJhU0ZwVVRWVmFNbGRxUW5OU1JrWllXa2QwVTAxdVozZFdNbmhPVFZkV2RGTnJhRmRpV0doeFZWUkthMDB4VWtoalJVcHNVbFJHVlZsVVFqQlRiRVYzVTFoc1dGWnRVVEJVVmxwM1ZrWkdWV0pGY0ZOTmJtZDRWMVJDYjFZd01VWmtSVkpvVFcxU1MxVldZelZpYkU1V1lVVjBhVkl4U2twV2JUVnpZVmRHVmxOWWJGaFdiVkV3VkZaYWQxVnRUa1ZSYlhoWVVsVndNMWRYTUhoaE1WWllWRzVTYVZOR1duSlZWRXB2VTBac2NWUnJkR2xTV0doNlZUSjBZVlV4UlhwVWJsWlVZbTE0Y1ZkcVFuTlNSa1pZV2tWd1VrMUZXblZWTVZaT1RVWnZkMkpGVWxKV01sSkxWVlJDUjJKc1RsWlVhMHBoVFVkNFJWVldaR3RUYkVWM1VtMDFWRlpWTlVOWGFrSnpVa1pHV0ZwRmNGSk5SVnAxVlRGV1QxRnNiM2RpUlZKU1ZqSlNTMVZVUWtkaWJFNVdWR3RLWVUxSGVFVlZWbVJyVTJ4RmQxSnROVlJXVlRWRFYycENjMUpHUmxoYVJYQlNUVVZhZFZVeFZrOVJiVkpXVkc1Q1VsWXlVa3RWVkVKSFlteE9WbFJyU21GTlNHZ3dWR3RrYTFOc1JYZFNiVFZVVmxVMVExZHFRbk5TUmtaWVdrVndVazFGV25WVk1WWlBVV3h2ZDJKRlVsSldNbEpPV1ZaV1IySnNUbFpVYTBwaFRVZDRSVlZXWkd0VGJFVjNVbTAxVkZaVk5VTlhha0p6VWtaR1dGcEZNV2hXVlZwMVZURldUMUZzYjNkaVJWSlNWakpTUzFWVVFrZGliRTVXVkd0S1lVMUhlRVZWVm1SclUyeEtObFZxUmxKTmJYaERWMnBDTkdOR1JsaGFSWEJTWld4YWVWWnNWazlSYkc5M1lrVlNVbFl5VWt0VlZFSkhZbXhPVmxSclNtRk5SM2hGVlZaa2ExTnNSWGRTYlRWVVZsZFNWRlpXVm5OU1JrWllXa1Z3VWsxRlduVlZNVlpQVVd4dmQySkZVbEpXTWxKTFZWUkNSMkpzVGxaVWEwcGhUVWQ0UmxsclpITlRiRVYzVW0wMVZGWlZOVU5YYWtKelVrWkdXRnBGY0ZKTlJWcDFWVEZXVDFGc2IzZGlSVkpTVmtaYVlWbFdVbE5pYkU1V1ZHdEtZVTFJYUhWWmFrcHJWREZGZDFKdE5WUldWVFZFV2xWYWExTkdUbGhhUlhCU1RVVmFkVlV4Vms5UmJHOTNZa1ZTVWxkR1drdFZWRUpIWW14T1ZsUnJTbUZOUjNoSlZsZDRjMU5zUlhkU2JUVlVWbFUxUTFkcVFuTlNSa1pZV2tWd1VrMUZXblZWTVZaUFVXeHZkMkpGVWxKV01sSkxWVlJDUjJKc1dYZGFSWEJoVFVkNFJWVldaR3RUYkVWM1VtMDFWVkl5ZUVOWGFrSnpVa1pHV0ZwRmNGSk5SVnAxVmpKMFlXSXlVWGRpUlZKU1ZqSlNTMVZVUWtwa01VVjVUVlpPV0ZaWWFIZFZWbVJyVTJ4RmQxSlVSbGROUjFKTFYycENjMUpHUmxoYVJYQlNUVVZaZUZZeWRHRmlNa1pXWWtWU1VsWXlVa3RWYlhCellsWk9WbFJyU21GTlIzaEZWVlprYTFOc1JYZFNiVFZVVmxVMVExZHFRbk5TUmtaWVdrVndVazFGV25WVk1WWlBVV3h2ZDJKRlVsSldNbEpMVlcxd2MySldUbFpVYTBwaFRVZDRTVlpYZUhOWGJVWlZWVzAxVkZaVk5VTlhha0p6VTBaV2MySkdXbEpOUlZwMVZURldUMUZzYjNkbFNFNW9Vako0UlZsWE1UUlhiRmwzV2tWd2ExWnRaekZWVm1SclUyeEZkMUp0TlZSV1ZUVkVWMjEwTkdSR1ZuTmlSbWhUWWxkb1lWWXhaSE5STWtWNFdrVmthRkp0ZUZsVmFrSjNUV3hTU0dKRlNtRk5SM2hGVlZaa2ExTnNSWGRTYlRWVVZsVTFRMWRxUW5OU1JrWllXa1Z3VWsxRlduVldSV04zVGxkRmVGcEZaR2hTYlhoWlZXcENjMkpzWkhKWGJUbFlWbTFTU0ZsVlpITlVWMHBGWVVjMVZGWlZOVU5YYWtKelVrWkdXRnBHYkd4V1JscDVWbXBDWVdJeFZsWlVia0pTVmtaYVdWVnRNVzlYYkZsM1YyMDVXRlp0VWtoWlZWcHpWMFpLZEdGR2NGZE5SbkIyVmpGYWExSXlSa2RpUm1oVFlraENZVlpxUW1GaU1XUlhXa1ZrYUZKdGVGbFZiRkp6VFd4U1NHSkZTbUZOUjNoRlZWWmthMU5zUlhkU2JUVlVWbFUxUTFkcVFqUmtSVGxYVVd4b1UySlhhR0ZXYWtKaFlqRmtWMXBGWkdoU2JWSlpWVzB4YjFkc1dYZFhiVGxZVm0xU1NGbFZXbk5YUmtwMFlVWndWMDFHY0haV01WcHJVakpHUjJKR2FGTmhNRnBOVlRGV1QxRXhiM2RQVm1Sb1VtMTRXVlZ0TVc5WGJGbDNWMjA1V0ZadFVraFpWVnB6VjBaS2RHRkdjRmROUm5CMlZqRmFhMUl5UmtkaVJtaFNUV3hHZVZVeFZrOVJiRzk1VjI1U1VtSkZTbFpVVlZKdVRVWmtXR0pGU21GTlIzaEpWbFpTVTFaVk1VVmlSa1pVWVdzd2QxZHFRbk5TUmtad1pFWndVMkpYYUdGV2FrSmhZakZrVjFwRlpHaFNiWGhaVlcweGIxZHNXWGRYYlRsWVZtMVNTRmxWV25OWFJrcDBZVVp3VjAxR2NFTlpiWFJQWTBaR1dGcEZjRkpOUlhCMVZrUkdZV0l4WkZkYVJXUm9VbTE0V1ZWdE1XOVhiRmwzVjIwNVdGWnNXa1ZYVkVwclYyeEtTR1ZHY0ZkTlJUVnhWMnBDYzFKR1JsaE9WWFJzVmpBMU5WWlhNSGRPVjFaWFkwWlNUMVpVUmxWV2JHUlRVMnhhY2xadGRGWk5WWEJYVm0xek5WZFZNVWRYYkhCVVRUSjRjVmx0ZEhabFJsSjBZVVpPVWsxck5URlZNalZ6VFVaSmVWTlljRlJpV0doT1dXdFdkMUl4Vm5KVWJuQnBZVE5CTVZkVVNtdFRiRVYzVW0wMVdGWldTbmxVYTJSVFkxZEdSMUpyZEd4V1ZWcDFWVEkxYzJGdFNuSmpNMlJZWW14d2NWbHNXbGROVmxwR1ZtNU9WRkpyTlVoV1YzUnZWbTFGZUZkclpGZFNNMk14VlcxNGExSkhUWGxPVlhSc1ZqRktXbFpxUWs5aGJVcHlZMFJXYTFKWFVuQlVWRUozWXpGU1NHVkZkRk5pUlhCRldYcEpNVk15VmxoVWJUVlVWbFUxUTFkcVFuTlRSa1p6WWtab1UyRXdXakZWTVZaclVXczFWMXBGWkdoU2JYaFpWVzB4YjFkc1dYZFhiVGxZVm0xU1NGbFZXa2RUTWxGNVQxYzFWRlpWTlVOWGFrSnpVa1pHV0ZwRmNGUlNSbFo1VjIwd01FMVZjM2xYYmxaUFVqSlNTMVZVUWtkaWJFNVdWR3RLWVUxRWJGaFhhazVYVTJ4RmQxSnROVlJXVlRWRFYycENjMUpHUmxoYVJYQlNaV3hhZVZZeFl6Rk9SMFY0WWtoQ1QxSXlVa3RWVkVKSFlteE9WbFJyU21GTlIzaEZWVlprYTFSWFNraGhSa3BVVmxVMVExZHFRbk5TUmtaWVdrVndWRkpHVm5sWGJUQXdUVlZ6ZVZkdVZrOVNXRkpMVlZSQ1IySnNUbFpVYTBwaFRVZDRSVlZXWkd0VGJFVjNVbTAxVkZaVk5VTlhha0p6VWtaR1dGcEZjRkpOUlZwMVZURldUMUZzYjNka1JtaFVWMFphUzFWVVFrZE5WbVJ5V2tWMGEyRXphREJXVjNoSFV6QXhjbE5ZYkZSaGEzQkRWR3hhYzJORk5WbFhiVVpUVFVkM2VGVXhWazlSYlZKWFkwVmtZVTFxYkVWWlZsWkhZbXhPVmxSclNtRk5SM2hGVlZaa2ExTnNSWGRTYlRWVVZsVTFRMWRxUW5OU1JrWllXa1Z3VWsxRlduVlZNVlpQVVcxTmVHTkZaR2hTYlhoWlZXMHhiMWRzV1hkWGJUbFlWbTFTU0ZsVlduTlhiVVpXVW0wMVZGWlZOVU5YYWtaM1VqSkdSMkpHYUZOaVYyaGhWbXBDWVdJeFpGZGFSV1JvVW0xNFlWbFdVbE5VUms1V1ZHdEtZVTFIZUVWVlZtUnJVMnhGZDFKdE5WUldWVFZEVjJwQ2MxSkdSbGhhUlhCU1RVVmFkVlV4Vms5UmJHOTRZMFZrYUZKdGVGbFZiVEZ2VjJ4WmQxZHRPVmhXYlZKSVdWVmFjMVpzUlhsVWJUVlVWbFUxUTFwR1ZuTlNSa1pZV2tad1UxSXphR0ZXYWtKaFlqRmtWMXBGWkdoU2JYaFpWVzB4YjFkc1dYZGFSWEJVVFVkNFJWVldaR3RUYkVWM1VtMDFWRlpWTlVOWGFrSnpVa1pHV0ZwRmNGSk5SVnAxVlRGV1QxRnNiM2RpUlZKU1lsaFNXVlZ0TVc5WGJGbDNWMjA1V0ZadFVraFpWVnB6VjBaS2RHRkdjRmhXTW5oRFYycENjMU5HVm5GaFJuQm9WbFZhZFZVeFZtdFZNV1JYV2tWa2FGSnRlRmxWYlRGdlYyeFpkMWR0T1ZoV2JWSklXVlZrYzFKSFJsWlNiVFZVVmxVMVExZHFRbk5TUmtaWVdrVndVazFGV25WVk1WWlBVV3h2ZDJKRlVsSldNbEpMVlZSQ1IySnNVWGhYYlRsWVZtMTRkMWRVU210VGJFVjNVMjAxVjAxR2NIWldNVnByVWpKR1NHSkZNV2xXYTNCaFYyMTBZV0l5UmxabFNGSldZa2Q0V1ZWdE1XOVhiRmwzVkcxd1lVMUhlRVZWVnpGcldWWktkR0ZHY0ZkV1ZWb3lWMnBDYzFKR1JsaGFSWEJTVFVWYWRWVXhWazlSYkc5M1lrVlNVbFl5VWt0VlZFSkhZbXhPVmxSclNtRk5SM2hGVlZjeGExTXlWbFpTYlRWVVZsVTFRMWRxUW5OU1YwcEhZa1pvVTJKWGFHRldha0poWW0xSmQySkZVbEpXTWxKTlZtMHhiMWRzV1hkWGJUbFlWbTFTU0ZWV1pHdFRiRVYzVW0wMVZGWlZOVVJYYWtKM1RUSkplVnBGY0ZKTlJWcDFWVEZXVDFGc2IzZGlSVkpTVmpKU1MxVlVRa2RpYkU1V1ZHdEtZVTFIZUVWVlZtUnJVMnhGZDFKdE5WUldWVFZEVjJwQ2MxSkdSbGhhUlhCU1RVVndZVlpxUW1GaU1XUldZa1ZrWVUweFdtRlZNRnB6WkZaU1NHVkhOV0ZOVjFKSVdWVmFjMWRHUmxoUFZ6VlVWbFUxUTFkcVFuTlNSa1pZV2tWd1VrMUZXblZWTVZaUFVXeHZkMkpGVWxKV01sSkxWVlJDUjJKc1RsWlVhMHBoVFVkNFJWVldaR3RUYkVWM1VtMDFWRlpWTlVSV01WcFhVakExVjJKRmRFNWhNSEIzVlRGV1QxRnNiM2hqUlZKaFVqSlNXVlZ0Y0ZkWGJGbDNVbTVhWVUxSGVFVlZWbVJyVTJ4RmQxSnROVlJXVlRWRFYycENjMUpHUmxoYVJYQlNUVVZhZFZVeFZrOVJiRzkzWWtWU1VsWXlVa3RWVkVKSFlteE9WbFJyU21GTlIzaEZWVmQ0YzFSWFJsWlNWRVpVVmxVMVJGZHFRbk5TUmtaWVdrVjBiRlpWV25WV2JGWlBVVzFPUjFwRlNtbE5iVkpMVlZSQ1IySnNUbFpVYTBwaFRVZDRSVlZXWkd0VGJFVjNVbTAxVkZaVk5VTlhha0p6VWtaR1dGcEZjRkpOUlZwMVZURldUMUZzYjNkaVJWSlNWakpTUzFWVVFrdGliR1JZWWtWS1lVMVhlRVZWVm1SclUyeEZkMUp0TlZSV1ZUVkRXVzEwYzFKR1JuUmtSWFJyVFdwc01WVXlOWE5oYlU1elUyNVNVRmRIZUdoV1dIQlhVbFpaZUZaclpGVk5TRkV4VjFSSk1WTXdNVlpPVnpsV1lURndjbFl4Vm5kT1ZtdDVUbFY0VGxKdVFYbFhWRWw0Vm0xU1YxWnVTbGRoTVZwTldsWmtUMlJXVG5WaVJVcGhUVWQ0UlZWV1pHdFRiRVYzVW0wMVZGWlZOVU5YYWtKelVrWkdXRnBGY0ZKTlJWcDFWVEZXVDFGc2IzZGlSVkpTVmpKU1MxVlVRa2RpYkU1V1drVktZVTFIZUVWVlZtUnJVMnhGZDFKdE5WUldWVFZEVjJwQ2MxSkdSbGhhUlhCU1RXczFkVlV4Vms5UmJHOTNZa1ZTVWxZeVVrdFZWRUpIWW14T1ZsUnJTbUZOUjNoRlZWWmthMU5zUlhkU2JUVlVWbFUxUTFkcVFuTlNSa1pZV2tWU2FGWXdOVEZWTWpWelRVWkplVk5ZY0ZSaVdHaE9XVlJCTVZsV1ZsZFdWRUpxWVROQk1WZFVTVEZUYkVWM1VtMDFWRlpWTlVOWGFrSnpVa1pHV0ZwRmNGSk5SVnAxVlRGV1QxRnNiM2RpUlZKU1ZqSlNTMVZVUWtkaWJFMTZZa2h3YW1FelVURlplazVMVkVkV1dWUnViRlJOTW5nMldXMTBkMDVXYTNwVGJFNXBWa2QzTVZZeWVFNU5WbFY0VTJ4YVZsZEZjRXhhVm1SUFpGWldSbFJ0Y0dsaE0wRXhXa1ZXYTJGVk1IZGpTRTVWVWpOT05GVlhlRXBrTVZweVQxWmtVMVpXV2pWVk1qVnpZVzFLYzFKWWJGQldNMUpvVm1wQmVHSnNaRmhPV0VwaFRWWldOVlZ0ZEZkV01ERllXa2hXVkdKdGVIRlpNbmhMWkVVNVdXSkhSbFpsYkZwVlZsZDRWMVZ0VG5KalJGWmFUV3BXVWxsV1pFOWtWazUxWWtSQ1UwMXJiRFpWTWpFMFZGZEZkMDVYUmxaV2JGVjNXVEowZDA1V2EzbE9WWGhzVjBVMU5WVjZUbk5sYlU1eVpFUldhazB3Y0UxYVJFazFaRlpPZFdKSGNHcGlSWEF3VkRGb2MxbFdWalpXYlVaV1lrWlpNRlpHV2xKbFJtdDZVMnQwYkZZd05URlZNVlpQVVd4dmQySkZVbEpXTWxKTFZWUkNSMkpzVGxaVWEwcGhUVWQ0UlZWV1pHdFRiRVYzVW0wMVZGWlZOVU5hUlZZMFZrVXhTVlZyTVZabGEwbDNWa1ZhVG1ReVVrWmxSbEpPVTBaS1RsWlljRU5OUmxKSFZGaGthMUpZYUZWVVZXaFRWRlpXTmxGcVFsVlNhekV6V2tWV05GWkZNVWxWYXpGV1pXdEpkMVpGV2s1a01sSkdaVVpTVGxZd05YQlpWbVJQWkZaT2RWcElXbXBpUlhBd1ZERm9jMWxXVmpaV2F6VldUVlphY2xVeFdtRlNiSEJIVkd4T1YxWnNjRkZXTUZKRFZqRmtWbVJFVmxwTmFsWk1XbFpXUjJKc1RsWlVhMHBoVFVkNFJWVldaR3RUYkVWM1VtMDFWRlpWTlVOWGFrSnpVa1pHV0ZwRmNGSk5SVnAxVlRGV1QxRnJPVlpqUkZaYVRXcFdUVlJWV25kTmJHdDVUVlphYTFac1dubFdiWFJYVkVkV1dGUnVWbFJpYlhoRFYycENjMUpHUmxoYVJYQlNUVVZhZFZVeFZrOVJiRzkzWWtWa2FrMXFWa3hhVm1SUFpWWldkRTFFVm14V2JrSlZWR3hXVTFkR1dsWlhiRUpVVFRKNGNWbHRkSGRPYkVaWllVVjBiRll3TlRGVk0zQkRXVmRTZEZSdVVsZFhSbHBYV1ZSR1lWSnNUWHBpUjNCcFlUSTVORlJWWXpGVE1sWllWRzVzVm1KVVFURmFWbHAzVmtVMVZrNVdTbGRXTVVwSVZtdGtORlV4Um5Ka1JGWmFUV3BXVEZwV1ZrdFdWbkJHV2tWa2JGWXhTa1ZWVm1SclUyeEZkMUp0TlZSV1ZUVkRWMnBDYzFKR1JsaGFSWEJTVFdzMU1WVXlOWE5OUmtsNVUxaHdWR0pZYUU1WlZFNXZVekZXY1ZGdE9WZFdhMncwVlRKMFlWVXhXbFZXYlRGV1lrWndkVmt5ZEhkT1ZtdDVUbFpHVjJKdFozaFZNalZ6WVcxS2NsUnVRbXRTVjFKd1ZGUkNkMk14VWtoa1JGSlVZa1ZzTTFsVldsZFZNREZXWTBWa1ZtSkdWWGhYYlhoTFZqRnZlbE5yZEd4V01EVXhWVEZXVDFGc2IzZGlSVkpTVmpKU1MxVlVRa2RpYkU1V1ZHdEtZVTFIZUVWVlZtUnJVMnhGZDFKdE5WUldWVFZEVjJwQ2MxSlZNVWhPVlhSc1ZqQTFOVlpYTUhkT1YxWlhZMFpTVDFack5WUldiRnBIWlZaT2RXSkhjR2xoTW5oRlZWWmthMU5zUlhkU2JUVlVWbFUxUTFkcVFuTlNSa1pZV2tab2JGWXdOVEZWTWpWelRVWkplVk5ZY0ZSaVdHaE9XVlJCTVZsV1ZsZFdWRUpxWVROQk1WZFVTVEZVYkVwR1lraFdWR0p0ZUhGWk1uaExaRVU1V1dKSFJsWmxiRnBWVmxkNFYxVnRUbkpqUkZaYVRXcFdXbFpVU2s5a1ZrNTFZa1JDVTAxcmJEWlZNakUwVkZkR05sSnJUbFpoYTBwWVZrUkdZVkpzU2xsVGEzUnNWakExTVZVeFZsZFZNa3BJVlc1U1YySnJOWEJVVkVKTFl6RnJlV0pGU21GTlIzaEZWVlprYTFOc1JYZFNiVFZVWW0xNGNWbHRkSHBrTVdSMVYyMXdhVlpzV1hoV2ExWlhZekZPUjFSclpGWmhNbWhYV1ZSR1lWSXhXa2hrZWxaVFlrZFNSVmw2U1RGVE1sWllWRlJXV0ZKWFRYZFpiWFIzVGxacmQyUkZlRTVTYmtGNVYxUkplRlp0VWxkVmExcHBVbGRvVlZWdGVFdFRWbHBZWkVaa1UySkdTbnBVTVZaaFYwWkZlbFJ1VmxSaWJYaHhWMnBDYzFKR1JsaGFSWEJTVFVWYWRWVXhWazlSYkc5M1lrVlNVbFl5VWt0VlZFSkhZbXhPVmxSclNtRk5SM2hGVlZaa2ExVldWWGxVYmxaVVltMTNkMVZxU2twbGJFNTBaVVV4YVZKWVFraFdWM1JQWlcxS2NtTkVWbHBOYlZKTFZWUkNSMkpzVGxaVWEwcGhUVWQ0UlZWV1pHdFRiRVYzVTIxc1ZHSnRlSEZaYlhSNlpERmtkVmR0Y0dsV2JGbDRWbFpTUjJNeFJuTlZia0pxVFdwV1RGcFdaRTlOTVZKWllrZHdhV0V6UVRGYVJWWnJZVlV3ZDJOSVRsVlNNMmhNVlcxNFMxSkhUWGxPVlhSc1ZqRktjbFV5TlhOaGJVcHlZek5rV0dKc2NIRlpiRnBYVFZaYVIxWnJaRlJTYTNCWFZHeGFWMVZzVlhwVWJsWlVZbTE0Y1ZkcVNrcGxiRlowVDFkR1dGSlhlSFZYYTFacVRsZFNkRk5yYkZWV01sSkxWVlJDUjJKc1RsWlVhMHBwWVROQk1WZFVUa3RWTWtwVllrUldXR0pGTUhoV1JscFBWbXh3Um1KR1pGTldNVXBWVmxkNFYxWXhVWGhhTTJSWFlrZDRUVnBXWkU5a1ZrNTFZak5vV2sxcmNIZFhWRWt4VXpKUmVVOVliRlppVkVFeFdsWmFkMVpGTlZaTlZsSlhWakZLUzFadGRGZGhNVlY0VTJ4YVYyRjZiRnBVVlZwaFYyeE5lbUpIY0dsaE0wRXhWVlprYTFOc1JYZFNiVFZVVmxVMVExZHFRbk5TUmtaWVdrVndVazFGV25WVk1WWlBVV3h2ZDJKRlVsSldNbEpMVlZSQ1JrNVdUblZpUjNCcFlUTk9NMVl5TldGaGJVcFhWbXBHVjFZelVsaFZiRll3VGxacmVVNVZkR3hXVlZwMVZURldUMUZzYjNkaVJWSlNWakpTUzFWVVFrZGliRTVXVjI1d2FXRXpRVEZYVkU1TFZUSktWV0pFVmxoaVJUQjRWV3RhYTFac1NuSlBWWGhzVmpBMU1WVXlOWGRSYXpGR1kwUldXazFxVmsxVVZWcDNUV3hyZVUxV1dtdFdiRnA1Vm0xMFYxUkhWbGhVYmxaVVlXdFdNMWx0ZEhkT1ZtdDZVMnhPYVZaSGR6RldNbmhPVFZaU2MxSnNXbUZTVm5CV1dXdGFTMUV4VFhwaVIzQnBZVE5CTVZWWE1UUmlSa2w1WkROa1ZGWlhhRlJhUnpGS1pWZFJlVnBGY0ZKTlJWcDFWVEZXVDFGc2IzZGlSVkphVFdwV1RGcFdhRk5UUm14eFZHdDBhVkpZYUhsYVZWWjNWVEF4U0dGR1dsWmhhMXBNVlcxNFMxWnJOVmhYYkU1WFlsZFNOVlV5TlhOaGJVcHpVV3hrYkZOR1dreGFWbVJQWkZaRmVXSkVRbE5OYTJ3MlZUSXhORlJYU2tobFJXUlhVbFpaTUZaVldtRk9WMDE1VGxWMGJGWXdOWFZWTVZaUFVXeHZkMkpGVWxKV01sSkxWVlJDUjJKc1RsWlVhMHBoVFVkNFJWVldaR3RUYkVWM1VtMDFWRlpWTVROYVJWWTBWa1V4U1ZWck1WWmxhMGwzVmtWYVRtUXlVa1psUmxKT1UwWktUbFpZY0VOTlJsSkhWRmhrYTFKWWFGVlVWV2hUVkZaV05sRnFRbFZTYXpFeldrVldORlpGTVVsVmF6RldaV3RKZDFaRldrNWtNbEpHWlVaa2JGTkdXa3hhVm1SUFpGWk5lRkp1WkU1TmJGcEZWVlpTYzFOc1RrZFRWRVphVFVkU2VscEdXblprTWtwSlZtMXdWRkpzYkROVmVrSlhXVmRTZEZSdVVsZFhSbHBUVkZaa05GRXhXa2hpU0hCcFlrWmFTVnBWWkRSWGJHUkdUbGhPVkZaV1dsaGFSbVJUVTBaYWRXSkZjRk5XUmxZMFYxZDRhMU15U2toVWJrSlNZVEpTY0ZSVVFuTmliRnB6WVVVNWFWSllRVEZhUlZacllWVXdkMk5JVGxWU00yaDZWVzE0VTFKdFZrZFJiR1JzVjBVMU1WWkVTbk5oYlU1R1ZHNVNhVko2Umt0Vk1HUlNUVVpPVmxWWVpGQldWM2hGVjFST2IxTXlWblJQVlhoVVZsVTFRMWRxUW5OVFZrWjFWMjF3VGsxRVZuaFhWbFpyVWpKV1YxRnNiRlpoYkZweFZXcEtORTFXWkhGUmJrNXJWakExU2xadGNFTlVSa3BYWTBSS1drMXFSbGRhUmxwR1pVZEtSbE5zVm1oWFJUVXhWbXhXYTFJeVZuUlVXSEJoVTBad2NWbHNXa2RpYkd4eVdraE9iR0pXU2tWWFZFNUxWVEpLVldKRVZsaGlSVEI0VmtaYVQxWnNjRVppUm1SVFZqRktWVlpYZUZkV01WRjRXak5rVjJKSGVFMWFWbVJQWW14a1ZWTnRPV2hTTURVd1ZXMHhkMkV4U1hoWGFsWlVWbFUxY1ZreWVFdGtSVGxaWWtkR1ZtVnNXbFZXVjNoWFZXMU9jbU5FVm1wTmFsWk5WRlZhZDAxc2EzbE5WbHByVm0xU1YxWnRjM2hXVmtwVllrWnNWRTB5ZUhGYVJWWTBWa1pyZWxOc1RtbFdSM2N4VmpKNFRrMVdVbk5TYkZwaFVsWndWbGxyV2t0Uk1VMTZZa2R3VEUxVlNuaFVhMk14VkVaV1dFOVhOVlJXVlRWRFYycEtUMlJHV25WYVIwWlhUVVpzTTFkWE1ERldNbEpIVVd4c1ZtRnNXbkZWYWtvMFRWWmtjVkZ1VG10V01EVktWbTF3UTFSR1NsZGpSRXBhVFdwR1YxcEdXbE5TYlVwR1lVWlNVMkpGY0VwV2JHUXdWakZLYzFWdVRsQldWbkJaVlZST1QyUldXa2hPVm1SclVtMTRNRlp0TlhOVGJFVjVWRzVzVm1KVVFURmFWbHAzVmtVMVYxUnNUbGRXYTFvMVZUSndTazVYU2xaaVJWSmFUVEJ3VkZsc1VuTk9WbVJ6VkZSR1ZWWnJOVmRYYTFaelZqRktXRlZzVWxaaVJscFlWa1JHYm1ReFduTmlSWGhzVmpGS2VGZFdWbXRTTWxaWFlrWm9WV0ZyU21oV01GWjNUbXhPVmxSdGNHcGlSWEF3VkRGb2MxbFdWalpXYkZKV1lrWmFVMWt5ZEhabFYwcEpWbXR3VWsxck5UVldWekIzVGxkV1YyTkdVazlXYmtKVVZteG9iMVJzV2tWU2JYQnFZVEk1TmxaWE1EVlpWbFYzVTJwT1dGWnRhRkJhVnpGU1pWVTVXV0pIUmxKTlJYQTJWMVphYjFRd01VWmlSVkphVFRCd1ZGbHNVbk5PVm1SelZGUkdWazFWY0ZkV1ZtaExVekpXV1ZSdVZsUmxhMHBvV2tjeFQyUkdXbGxXYkdoWFZteHdUMVpyVmxaT1ZtUkdaRVJXV2sweFNrNVdWRXBQWlZaV2RFMUVWbXhXYmtKVlZHeFZNVlZzV2xoVmEyUlhVak5vVkZWWGREQk9WbXcxWkVaR2FHRnNTakZWZWtaSFpHeHZkMkpGVWxKV01sSm9XV3hrTkdWc1pITlZXR2hyWWxVMVNWWnROVmRVUmtWM1kwWldXRlpzV2xSV01GcHJVMVpHY2xOdGNFNVdWRlkyVmxSR2IxUXhXbFpsU0ZaV1lXeEtjbFZVUW5ObGJFNVlUVlZhYUZaWVVsTlpha3ByVTJ4RmQxSnROVnBoTWxKWVZGVmtVMU5HV25WaVIzQnNZV3RhTTFkclZtdFdNbFpZVld0b1VGZEdjSEJWTUZWNFRWWnJkMkZGZEd0aVNFSktWbTB4ZDJFeFJYbGhSRTVhWVdzMVVGcFhlSEpsVjBaSVlVZHdhRmRIWnpGV01uaHZVVEpLUjJKR2JGWldSM2h2Vm01d1ZtUXhUWGRoUlhScFVqQTFTVlp0TVc5aE1VbzJWbGhvV21KRk5YbFpNRlpQWTBaR1dGcEZjRkpOUlc4eVZqRmFhMDVIUmtoVGJGSlNWa2Q0UzFVd1drcE5WbXQzV2toT2ExWnRPVFJWVnpWellVWmFObFpZWkZSTlJscG9Xa2N4VDJSR1dsbFdiRXBPVmpOb1JGWnJaSE5sYlVwelZtdG9iRkl6YUdGV01GVXhZekZPVmxkdGRHaFNNRnBhVmxaak1WUkZNVWRqUkVwYVRXcEdWMXBHV2xOV2JFcHlZVVpPVjFaR1dsZFdWbHBQWlcxS2NtVklRazlUUmxwT1dWWmtUMlZXVm5STlJGWnNWbTVDVlZSc1ZsTlhSbHBXVjJ4Q1ZFMHllSEZhUmxaM1RsZEZkMlJGY0ZKTlJWcDFWVEZXYTFsWFVuUlVia0pTWW10S1MxVnFTalJOVms1V1drUlNhVkl4U2twV1Z6RTBZVzFLY2sxRVNsSk5iWGhEVjJwQ2MxSkdSbGhhUlhCU1RVVmFkVll5TUhoak1rMTRZMFpTVDFaRk5YRlpiR1F6WkRGa2MxUnROV2hXVjNoM1ZHeG9SMkZWTVhSbFJFWlVUVWRTZVZrd1ZqQk9WbkJJVkcxc2FGWXdOVE5WVkVwelVXeHZkMkpGVWxKV01sSkxWVlJDUjJKc2JEWlRhbEpwVW01Q1dsVldZelZVTVZWNVpFVjRWRlpWTlVOWGFrSnpVa1pHV0ZwRmNGSk5SWEI1VmpKNGExSXlSWGRpUlZaT1VqSlNjbFV3WkRSTk1XeFhXWHBHYVdKR1drcFZNalZEWVZkS2MxSnVXbFppVkVFeFdsWmFkMVpGTlZkalJrNVhWMGRvVDFaclVrZGhiVTV5WWpOb1ZXSlhhSEpaYkZwaFkyeE9WMVJ0Y0dwU1ZUVjNWVlprYTFOc1JYZFNiVFZVVmxVMVExZHFSbmRrUjBwSlZHMUdWbVZzV25oWFYzUnFUbGRXYzJOR1VtRk5NRXBGVjJwT1EyTXhiSEphU0U1cFZsZDRTbGRyVWxOVGJFcEZVVlJXVkZaVk5YRmFWbFozVG0xSmQyUkZjRkpOUlZwMVZURldiMVF3TlZoVVdIQldZbGhvY0ZaVVNtdGtWbVJWVTJwU2FWSnRlRnBWTVdNeFZFWldXRTlYTlZSV1ZUVkRWMnBLVG1WdFNrbGpSM1JUVFZadmQxVjZRazloTURWSFkwVm9XazB4U25CVVZFSkxZekZzZEdKRlRtbE5iRXBLVmxjMWEyRnRWblJQVkVwVlVrVTFVMXBHWkV0WFJscFpWMnhhVG1FeGNFZFdNRkpIWVRGa1Yxb3phRmhpYTBwWFdXMTRZVlpXVG5WaVNFcFVUVmhDV1ZwVmFFTlpWMFpXVTFod1lWWlZOVU5VTVZwRFZrWkdXRTVWTld4V01EQjVWVlJLYzFGc2IzZGlSVkpTWW01Q2MxWXdWVEJrTVdSeldUTmthVTFIT1RWV1J6VlBXVlpaZDFkcVZsUmliWGg1VlhwQ2MxSkdSbGhhUlhCVVVtdHJlRmRVUW10ak1sSlhZak5vVW1KdGVHOVdibkJXWkRGTmQxWnRSbXRpVlRVd1ZteG9WMVp0UlhoWGExcFVUVEo0Y1ZsdGRIZE5Na2w1V2tWd1VrMUZXblZWTVZaUFVXeHZkMkpGVWxKV01sSkxWVlJDUjJKc1RsWlVhMHBoVFVkNFJWVldaR3RUYkVWM1VtMDFWRlpWTlVOWGFrSnpVa1pHV0ZwRmNGSk5SWEJEVmxaV1YxRXhSbGRTYTFwU1ZqSlNTMVZVUWtkaWJFNVdWR3RLWVUxSGVFVlZWbVJyVTJ4S1ZsTnJTbFpXVmxwRVZWWmFSMUZ0U1hsYVJYQlNUVVZhZFZVeFZrOVJiRzkzWWtWU1VsWXlVa3RWVkVKSFlteE9WbFJyU21GTlIzaEZWVlprYTFOc1JYZFNiVFZVVmxVMVExZHFRbk5TUmtaWVdrWktVMVpWY0VOV1ZsWlhVVEZHVjFKcldsSmhNRnBUVlZSQ1IySnNUbFpVYTBwaFRVZDRSVlZYZEVkVmJFcFdVMnRLVmxaV1drUlZWbHBIVW14R2NsSnJVbWhXVlZwMVZURldUMUZzYjNkaVJWSlNWakpTUzFWVVFrZGliRTVXVkd0S1lVMUhlRVZWVm1SclUyeEZkMUp0TlZSV1ZUVkRWMnBDYzFKR1JsaGFSa3BUVmxWd1ExWldWbGRSTVVaWFVtdGFVbUV3V2xOVmJGWkxVV3hXVmxaclNtRk5SM2hGVlZkMFIxVnNTbFpUYTBwV1ZsWmFSRlZXV2tkU2JFWnlVbXhLVTFaVmNFTldWbFpIWkd4dmQySkZVbEpXTWxKTFZWUkNSMkpzVGxaVWEwcGhUVWQ0UlZWV1pHdFRiRVYzVW0wMVZGWlZOVU5YYWtKelVrWkdXRnBGY0ZKTlJYQkRWbFpXVjFFeFJsZFNhMXBTWVRCYVUxVnNWa3RSYkZaV1ZtdE9VbFpyV2tkVlYzUkhWV3hGZDFOclNsWldWbHBFVlZaYVIxSnNSbkpTYkVwVFZsVndRMVpXVmxkUk1VWlhVbXRhVW1Fd1dsTlZWbU0xWW14T1ZsUnJTbUZOUjNoRlZWWmthMU5zUlhkU2JUVlVWbFUxUTFkcVFuTlNSa1pZV2tWd1VrMUZXblZWTVZaUFVXeHZkMkpGV2xKaE1GcFRWV3hXUzFGc1ZsWldhMDVTVm10YVIxVlhkRWRWYkVwV1UydEtWbFpXV2tSVlZscEhVbXhHY2xKc1NsTldWWEJEVmxaV1YxRXhSbGRTYTFwU1lUQmFVMVZzVmt0UmJGWldWbXRPVWxacldrZFZWbFl3VTJ4RmQxSnROVlJXVlRWRFYycENjMUpHUmxoYVJYQlNUVVZhZFZVeFZrOVJiRzkzWWtWU1VsWXlVa3RWVkVKSFlteE9WbFpyVGxKV2ExcEhWVmQwUjFWc1NsWlRhMHBXVmxaYVJGVldXa2RTYkVaeVVteEtVMVpWY0VOV1ZsWlhVVEZHVjFKcldsSmhNRnBUVld4V1MxRnNWbFpXYTA1U1ZtdGFSMVZYZEVkVmJFcFdVMnRLVmxaV1drUlZWbHBIVVcxSmVWcEZjRkpOUlZwMVZURldUMUZzYjNkaVJWSlNWakpTUzFWVVFrZGliRTVXVkd0S1lVMUhlRVZWVm1SclUyeEZkMUp0TlZaV1ZscEVWVlphUjFKc1JuSlNiRXBUVmxWd1ExWldWbGRSTVVaWFVtdGFVbUV3V2xOVmJGWkxVV3hXVmxaclRsSldhMXBIVlZkMFIxVnNTbFpUYTBwV1ZsWmFSRlZXV2tkU2JFWnlVbXhLVTFaVmNFTldWbFpYVVRGR1ZsUnVRbEpXTWxKTFZWUkNSMkpzVGxaVWEwcGhUVWQ0UlZWV1pHdFRiRVYzVW0wMVZGWlZOVU5YYWtKelVrWkdXRnBGY0ZKTlJYQkRWbFpXVjFFeFJsZFNhMXBTWVRCYVUxVnNWa3RSYkZaV1ZtdE9VbFpyV2tkVlYzUkhVekpXV0ZSdVZsUmxhMHBvV2tjeFQyUkdXbGxXYkVwT1ZqTm9SRlpyWkhObGJVcHlZMFJXWVZKc1NtRldiRnBIWW14YWNWSnROV2xoTTBFeFYxUk9TMVV5U2xWaVJGWllZa1V3ZUZaVVJrdFdiRlpaVTJ0MGJGWXdOVEZXVmxaWFVURkdWMUpyV2xKaE1GcFRWV3hXUzFGc1ZsWldhMDVTVm10YVIxVlhkRWRWYkVaWVQxYzFWRlpWTlVOWGFrSnpVa1pHV0ZwRmNGSk5SVnAxVlRGV1QxRnNiM2RpUlZKU1ZqSlNTMVZVUWtkaWJFNVdWR3RLWVUxSGVFZFZWM1JIVld4S1ZsTnJTbFpXVmxwRVZWWmFSMUpzUm5KU2JFcFRWbFZ3UTFaV1ZsZFJNVVpYVW10YVVtRXdXbE5WYkZaTFVXeFdWbFpyVGxKV2ExcEhWVmQwUjFWc1NsWlRhMHBXVmxaYVJGVldXa2RTYkVaV1pFVndVazFGV25WVk1WWlBVV3h2ZDJKRlVsSldNbEpMVlZSQ1IySnNUbFpVYTBwaFRVZDRSVlZXWkd0VGJFVjNVbTAxVkZaVk5VTlhha1pIVW14R2NsSnNTbE5XVlhCRFZsWldWMUV4UmxkU2ExcFNZVEJhVTFWc1ZrdFJiRlpXVm10T1VsWnJXa2RWVjNSSFZXeEtWbE5yU2xaV1ZscEVWVlphUjFKc1JuSlNiRXBUVmxWd1ExWldWbGRSYkUxM1lrVlNVbFl5VWt0VlZFSkhZbXhPVmxSclNtRk5SM2hGVlZaa2ExTnNSWGRTYlRWVVZsVTFRMWRxUW5OU1JrWllXa1Z3VWsxRlduVlZNVlpYVVRGR1YxSnJXbEpoTUZwVFZXeFdTMUZzVmxaV2EwNVNWbXRhUjFWWGRFZFZiRXBXVTJ0S1ZsWldXa1JWVmxwSFVteEdjbEpzU2xOV1ZYQkRWbFpXVjFFeFJsZFNhMXBTWVRCYVUxVldZelZpYkU1V1ZHdEtZVTFIZUVWVlZtUnJVMnhGZDFKdE5WUldWVFZEVjJwQ2MxSkdSbGhhUlhCU1RVVmFkVlV4Vms5UmJHOTNZa1ZTVWxZeVVrdFZiRlpMVVd4V1ZsWnJUbEpXYTFwSFZWZDBSMVZzU2xaVGEwcFdWbFphUkZWV1drZFNiRVp5VW14S1UxWlZjRU5XVmxaWFVURkdWMUpyV2xKaE1GcFRWV3hXUzFGc1ZsWldhMHBVVFVkNFJWVldaR3RUYkVWM1VtMDFWRlpWTlVOWGFrSnpVa1pHV0ZwRmNGSk5SVnAxVlRGV1QxRnNiM2RpUlZKU1ZqSlNTMVZVUWtkaWJFNVdWR3RLWVUxSGVFZFZWM1JIVld4S1ZsTnJTbFpXVmxwRVZWWmFSMUpzUm5KU2JFcFRWbFZ3UTFaV1ZsZFJNVVpYVW10YVVtRXdXbE5WYkZaTFVXeFdWbFpyVGxKV2ExcERXV3BLYTFOc1JYZFNiVFZVVmxVMVExZHFRbk5TUmtaWVdrVndVazFGV25WVk1WWlBVV3h2ZDJKRlVsSldNbEpMVlZSQ1IySnNUbFpVYTBwaFRVZDRSVlZXWkd0VGJFVjNVMnRLVmxaV1drUlZWbHBIVW14R2NsSnNTbE5XVlhCRFZsWldWMUV4UmxkU2ExcFNZVEJhVTFWc1ZrdFJiRlpXVm10T1VsWnJXa05aYWtwclUyeEZkMUp0TlZSV1ZUVkRWMnBDYzFKR1JsaGFSWEJTVFVWYWRWVXhWazlSYkc5M1lrVlNVbFl5VWt0VlZFSkhZbXhPVmxSclNtRk5SM2hGVlZaa2ExTnNSWGRTYlRWVVZsWmFSRlZXV2tkU2JFWnlVbXhLVTFaVmNFTldWbFpYVVRGR1YxSnJXbEpoTUZwVFZXeFdTMUZzVmxaV2EwcFVUVWQ0UlZWV1pHdFRiRVYzVW0wMVZGWlZOVU5YYWtKelVrWkdXRnBGY0ZKTlJWcDFWVEZXVDFGc2IzZGlSVkpTVmpKU1MxVlVRa2RpYkU1V1ZHdEtZVTFIZUVWVlZtUnJVMnhGZDFKdE5WUldWbHBFVlZaYVIxSnNSbkpTYkVwVFZsVndRMVpXVmxkUk1VWlhVbXRhVW1Fd1dsTlZWbU0xWW14T1ZsUnJTbUZOUjNoRlZWWmthMU5zUlhkU2JUVlVWbFUxUTFkcVFuTlNSa1pZV2tWd1VrMUZXblZWTVZaUFVXeHZkMkpGVWxKV01sSkxWVlJDUjJKc1RsWlVhMHBoVFVkNFJWVldaR3RUYkVWM1UydEtWbFpXV2tSVlZscEhVbXhHY2xKc1NsTldWWEJEVmxaV1IyUnNiM2RpUlZKU1ZqSlNTMVZVUWtkaWJFNVdWR3RLWVUxSGVFVlZWbVJyVTJ4RmQxSnROVlJXVlRWRFYycENjMUpHUmxoYVJYQlNUVVZhZFZVeFZrOVJiRzkzWWtWU1VsWXlVa3RWVkVKSFlteE9WbFJyU21GTlIzaEhWVmQwUjFWc1NsWlRhMHBXVmxaYVExVjZRbk5TUmtaWVdrVndVazFGV25WVk1WWlBVV3h2ZDJKRlVsSldNbEpMVlZSQ1IySnNUbFpVYTBwaFRVZDRSVlZXWkd0VGJFVjNVbTAxVkZaVk5VTlhha0p6VWtaR1dGcEZjRkpOUlZwMVZURldUMUZzYjNkaVJWSlNWakpTUzFWc1ZrdFJiRlpXVW01YVlVMUhlRVZWVm1SclUyeEZkMUp0TlZSV1ZUVkRWMnBDYzFKR1JsaGFSWEJTVFVWYWRWVXhWazlSYkc5M1lrVlNVbFl5VWt0VlZFSkhZbXhPVmxSclNtRk5SM2hGVlZaa2ExTnNSWGRTYlRWVVZsVTFRMWRxUW5OU1JrWllXa1Z3VTFaVldrMVZNVlpQVVd4dmQySkZVbHBOYWxaTVdsWm9VMU5HYkhGVWEzUnBVbGhvZVZaSGVIZFZiRnBWVlc1c1ZHSnRlSEZaYlhSelVrWkdXRnBGY0ZKTlJWcDFWVEZXVDFGc2IzZGlSVkpTVmpKU1MxVlVRa2RpYkU1V1ZHdEtZVTFIZUVWVlZtUnJWRWRXV1ZSdWJGUk5NbmcyV1RKME1FNVhUWHBUYTNoc1YwVTFNVlV5TlhOaGJVNXpVMjVTVUZkSGVHaFdXSEJYVmtaV2MxWnNTbXBoTTBFeFYxUkpNVlZXUlhsVWJsWlVZbTEzZDFWcVNrcGxiRTUwWlVVeGFHVnJXa1JXVjNCRFZqRlJlRmRyV2xOWFJYQk1XbFprVDJSV1ZsVlRWRlpvVFZoQ1dWWkdaR3RYYlVwMFpFYzFWMVpGY0VoVmJGcGFaVVp2ZVU1VmRHeFdNRFUxVmxjd2QwNVhWbGRqUmxKUFZtczFWRlpzV2tkbFZrNTFZa2R3YVdKRlNuZFhWRWt4VXpKV1dWVnJhRnBoYXpWTVdXdFdOR05zVW5OalJrcFhWa1pLTlZVeU5YTmhiVXB5WkVSV2FrMHdjRTFhVm1oUFpWWk5lbUpJY0dwaE0xRjZXV3BLYTFOc1JYZFNiVFZVWW0xNGNWbHRkSHBrTVdSMVYyMXdhVlpzV1hoV2FrWlhWakZTVjFWcldsQldiV2hOV2xaa1QyUldUblZpUlVwaFRVZDRSVlZXWkd0VGJFVjNVbTAxVkZaVk5VTlhha0p6VWtaR1dGcEZjRkpOUlZwMVZURldUMUZzYjNkbFJsSk9VMFpLVGxaWWNFTk5SbEpIVkZoa2ExSllhRlZVVldoVFZGWldObEZxUWxWU2F6RXpXa1ZXTkZaRk1VbFZhekZXWld0SmQxWkZXazVrTWxKR1pVWlNUbE5HU2s1V1dIQkRUVVpTUjFSWVpHdFNXR2hWVkZWb1UxZFdTalpWYmxaVVltMTRjVlY2UW5OU1JrWllXa1Z3VWsweFNrbFhWM0JQVXpKS1JtVklTbXhTV0VKVVZGVmtiMVpzVm5GU2EzUlRZa1Z3VjFSc1pHRlZNVnAwV2toc1ZHSnRlSEZaYlhSelVrWkdXRnBGY0ZKTlJWcDFWVEZXVDFGc2IzZGlSVkpTVmpKU1MxVlVRa2RpYkU1V1ZHdEtZVTFIZUVWVlZtUnJVMnhGZDFKdE5WWlNhelZ4V1cxMGQwNVhVa1phUjJ4T1RVaENlbFpGWkRSVE1VcHpVMnRTYWsxcVZreGFWbVJQWW14T1ZsUnJTbUZOUjNoRlZWWmthMU5zUlhkU2JUVlhUVEo0Y1ZsdGRIZE9WMUpHV2tkc1RrMUlRbnBXUldRd1ZERmtjMUpzV2s5VFJYQk1XbFprVDJSV1VsWlZhMXBwWVROQk1WZFVUa3RWTWtwVllrUldXR0pGTUhoV1ZFWkxWbXhXV1ZOcmRHeFdNRFV4VmpCYVQyRnRTbkpqUkZaclVsZFNjRlJVUW5kak1WSklZek5vVW1KRmJETldiWE0xVmpGS1ZsWnViRlJpYlhoeFdXMTBjMUpzU25Sa1IyeFhUVzVuZUZVeFZtOVJNa1pJVTI1U1YySnJOVXRWYWtaM1pERnNkRTFXVG1sU01EVjNWVmQ0YjFkR1JYZFNibFpVWW0xNGNWa3llRXRrUlRsWllrZEdWbVZzV2s5V1ZFWlhZVEZPVjFkcldtRlNhelZVVm14YVlWVkdaRVZSYkdSWVZsaFJNVmRVU1RGVE1sWnhVbTF3V21KWGVIRlpiWFIzVFRKSmVWcEZjRkpOUlZwMVZUTndRMWxYVW5SVWJsSlhWMFphVmxWc1pEUlRWbFYzVjJ4T1ZGSnNXbmxXYlhSaFZsZEtSV0pGWkZkTlJUVTJXVzEwZDA1V2EzbGFSWEJTVFVWYWRWVXhWazlSYkc5M1lrVlNVbFl5VWt0VlZFSkhZbXhPVmxSclNtRk5SM2hGVlZaa2ExTnNSWGRTYlRWVVZsVTFRMVF4Vm5kT1ZtdDVUbFY0VGxKdVFYbFhWRWw0Vm0xU1YxWnVTbGRoTVZwTldsWmtUMlJXVG5WaVJVcGhUVWQ0UlZWV1pHdFRiRVYzVW0wMVZGWlZOVVJYVjNSM1RsWnJlVTVWZUU1U2JrRjVWMVJKZUZadFVsZFNXR2hwVWxWd1ZsbFdhRTlrVms1MVlrZHdhMDFFUm5kWFZFa3hVekpXV1ZWcmFGcGhhelZNV1d0V05HTXhUbkpYYkU1U1RUQTFNVlV5TlhOaE1YQkdZMFJXV2sxcVZrMVVWVnAzVFd4cmVVMVdXbXRXYkVwWFZXMTBiMVV4V2xWV2JGcFdWbXMxTmxsdGRIZE9WbXQ1V2taT1UxWnJjRkpXYkZKSFlURmtWbUpGVWxKV01sSkxWVlJDUjJKc1RsWlVhMHBoVFVkNFJWVldaR3RUYkVWM1VtMDFWRlpWTlhGWmJYUjNUbGRTUmxwSGJFNU5TRUo2VmtWa01FNUdUbk5UV0dSb1VteGFWRlJXVm5kU01WWnpWbFJHWVdKRmNGaFhhazVMVXpKV1dGUnVWbFpTYkc4d1drWldkMDVXYTNsT1ZWSm9WbFZhZFZVeFZrOVJiVTV6VTI1U1VGZEhlR2hXV0hCWFZHeFZlRlp0ZEZSV2JIQkhWMnRhVDFVeFdsZFhiRUpZVWtWS1dGWXhWakJPVm10NVRsVjBiRlpWV25WVk1WWlBVV3h2ZDJKRlVsSldNbEpMVlZSQ1IySnNUbFpVYTBwaFRVZDRSVlZXWkd0VGJFVjNVbTAxVkZaVk5VTlhha0p6VWxVeFNFNVZkR3hXTURVMVZsY3dkMDVYVmxkalJsSlBWbXMxVkZac1drZGxWazUxWWtkd2FXRXllRVZWVm1SclUyeEZkMUp0TlZSV1ZUVkRWMnBDYzFJeVRYbE9WWFJzVmpBMU5WWlhNSGRPVjFaWFkwWlNUMVpXU2xsV2JGWmhWVVpOZW1KSGNHbGhNMEV5VlZab2QxTXlWbGhVYmxaVVpXdEthRnBITVU5a1JscFpWbXhhYUUxV2NFZFZlazV6WVcxS2NtSXphRTVTZWxaTVdsWmtUMlZXVm5STlJGWnNWbTVDVlZSc1ZURlZiRnBZVld0a1YxSXphRlJWVjNRd1RsWnJlVTVWZEd4V1ZYQkhWako0YjFsWFNraFRhMmhRVjBkU2FGWXdWbk5pYkU1V1ZHdEtZVTFIZUVWVlZtUnJVMnhGZDFKdE5WUldWVFZEVjJwQ2QwNVdhM2xPVlhoT1VtNUJlVmRVU1hoV2JWSlhWV3RhYVZKWGFGVlZiWGhMVTFaYVdHUkdaRk5pUmtwNlZERldZVmRHUlhwVWJsWlVZbTE0Y1ZReFdtOVRSVFZJVGxWMGJGWXdOVTFWTVZaUFVXeHZkMkpGVW10U1YxSndWRlJDZDJNeFVraGtSRkpVWWtWc00xbFZXbGRWTURGV1kwVmtWbUpHVlhoWGJYaExWakZ2ZWxOcmRHeFdNRFV4VlRGV1QxRnNiM2RpUlZKU1ZqSlNTMVZVUWtkaWJFNVdWR3RLWVUxSGVFVlZWbVJyVTJ4RmQxSnROVlJXVlRWRFYycENjMUpHUmxoYVJrWldUV3MxTVZVeU5YTk5Sa2w1VTFod1ZHSllhRTVaYTFaM1VqRldjbFJ1Y0dsaE0wRXhWMVJLYTFOc1JYZFNiVFZVVmxVMVExZHFRbk5TUmtaWVdrWm9iRll3TlRGVk1qVnpUVVpKZVZOWWNGUmlXR2hPV1ZSQk1WbFdWbGRXVkVKcVlUTkJNVmRVU1RGVWJFcEhVbTVXVkdKdGVIRlpNbmhMWkVVNVdXSkhSbFpsYkZwVlZsZDRWMVZ0VG5KalJGWmFUV3BXV2xaVVNrOWtWazUxWWtSQ1UwMXJiRFpWTWpFMFZGZEdObEpyVGxaaGEwcFlWa1JHWVZKc1NsbFRhM1JzVmpBMU1WVXhWbXRXTURWSVVteHNWbFl5VW5KVmJuQnpUV3hzY21GRk5XRk5SM2hGVlZaa2ExTnNSWGRTYlRWVVZsVTFRMWRxUW5OU1JrWllUbFYwYkZZd05UVldWekIzVGxkV1YyTkdVazlXVkVaVlZteGtVMU5zV25KV2JYUldUVlZ3VjFadGN6VlhWVEZIVjJ4d1ZFMHllSEZaYlhSM1Rtc3hXRlJ0YkdoV01EVXhWVEkxYTJSc2IzZGlSVkpTVmpKU1RWUlZXbmROYkd0NVRWWmFhMVp0VWxkV2JYTjRWbFpLVldKR2JGUk5Nbmh4V1cxMGQwNVdSbGhhUlhCU1RVVmFkVlV4Vms5UmJHOTNZa1ZTVWxZeVVrdFZWRUpIWW14T1ZsUnJTbUZOUjNoRlZWWmthMU5zUlhkU2JUVlVWbFUxUTFwRlZqUldSVEZKVldzeFZtVnJTWGRXUlZwT1pESlNSbVZHVWs1VFJrcE9WbGh3UTAxR1VrZFVXR1JyVWxob1ZWUlZhRk5VVmxZMlVXcENWVkpyTVROYVJWWTBWa1V4U1ZWck1WWmxhMGwzVmtWYVRtUXlVa1psUmxKT1ZqQTFjRmxXWkU5a1ZrNTFZa2hLVkUxSGVFVlZWbVJyVTJ4S2NrNVhPVmhoTURWRFZERldjMU5XVm5GV2JYQlRUVzVuZUZZeWNFTmpNbEpZVkd0c1YyRnJTazFWYkZwM1RXeHJlVTFXV210V2ExWTBXV3RXUzFaWFJsbFVibFpYVmxkUk1GbHJXbk5YVmxKMFpVVndVMVpzYjNoWGExWnJWakpXVm1KRldrOVdSVnB3Vm1wQ2QyTXhhM2xpUlU1VFRXdHNObFV4Wkd0V01XUkdUbGhPVkZaV2NGUmFSekZLWlZkV1NXTkZjRkpOYXpVMVZsY3dkMDVYVmxkalJsSlBWbXMxVkZac1drZGxWazUxWTBoYWFXRXpVbE5aYWtwclUyeEZkMUp0TlZwV2JWSmhWMnBHVm1WV1NuUmtSa1pYVWtWS2RWVXlOWGRTYlVweVQxYzFhVTF0VWt0VlZFSkhZbXhPVmxSclNtRk5SM2hLVmtkd1YyRnJNSGhUYms1YVlrVTFkVmx0ZUhKbFYxWklaVVp3V0ZKWGVERlZla1pIWkd4dmQySkZVbEpXTWxKTFZWUkNSMkpzVGxaaFJUbFBWakF4TmxaWE1UUmhWbFY1V2toV1drMUhVWGRaYlhSelUxWmFkVnBIUmxOTlJtd3pWako0VDFGdFVraFdiRkphVFRCS1JWbFdWa2RpYkU1V1ZHdEtZVTFIZUVWVlZtUnJZV3N3ZVdWRVdtRlNWMUpZV2tWV01GSkdjRWxhUjJoT1lsVTFkVmRyV205Uk1rcDBWRzVTVTJKWVVtaFdWRUpIVFVad1YxUnRjR3BTVlRWM1ZWWmthMU5zUlhkU2JUVlVWbFUxUTFkcVNrNWxiVXBKWTBkMFUwMVdiM2RWZWtKUFlUSlJlVkpZYkZwTmJWSnZWbTV3VjA1c2NFWmFSV1JxVFd0d1JWVlhOV3RpUm1SSFUyNWFXbUZyYTNkYVZsWnpVa1V4VlZacmRHeFdNMUpOVlRGV1QxRnNiM2RpUlZKU1ZqSlNTMVZVUWt0T2JIQlhZVVU1VGxKdVFsbFVWV00xVXpBeGRGVnVaR0ZTVlRWRVdWY3hTMU5GT1ZsV2JVWldUVVZ3TWxkclZtOVZNbEY1VkdwYWFVMHhjRTVVVnpGVFpERndSbHBIT1U1V2JYaDNWR3hrZDJGVk1YRlJha3BYWVd0S2VsWlVSbEpsUmxwellrVXhUazFGY0haWFZ6QjRWakpOZUZvemJGTmlXRkp3Vm01d1YySldaSFJOV0U1clZtNUNTVlp0TlhOWFZURllWV3h3VkdKdGVIbFZla0p6VWtaR1dGcEZjRkpOUlZwMVZURldUMUV5Vm5SVGEyaFhZbGhvY1ZWVVNtdE5NVkpJWTBWYWFsSlZOWGRWVm1SclUyeEZkMUp0TlZSV1ZUVkRWMnBLVG1WdFNrbGpSM1JUVFZadmQxVjZRazloTWtaelkwVlNVbUp0VW1GV2JuQlhZekZzY2xkVVZtaFNia0pKVkZab1YxZFZNWE5qU0dSYVlsUkdWRmxyWkU5ak1EbFhZVVpvVWsxRldqRlZla1pIWkd4dmQySkZVbEpXTWxKTFZWUkNSMkpzVGxaaFJUbHFUVmhDV1ZadE5XdFVSa3BHVW1wR1ZWWnJOWGxWZWtKelVrWkdXRnBGY0ZKTlJWcDFWVEZXVDFFeVZuUldiR3hWWVd0S2FGWnVjRU5rYkU1eFUyczVhVTFyY0ZsVU1XUXdVMnhGZWxWVVFsUldWMmhFV1ZWa1MyUkdXblZVYkd4T1lraENNMWRYTUhoVk1rcElWRzVPWVZKdGVFNVpiWFJLVFZaT2RXSklTbFJOUjNoRlZWWmthMU5zUlhkU2JUVlVWbFUxUkZwWE1VdFRSbHAwWlVkd1VrMXRVWHBXUldSM1VtMU9SbFJ1UWxKV01sSkxWVlJDUjJKc1RsWlVhMHBoVFdzeE5sbHJhSGRoTVVsNFYycENWRTFGTlhKYVJFcFhWMVpXZEU5WGJFNWhiRWt4VlRGV2IxRXlSa2hUYmxKWFltczFXbFJYZUhka01XeDBUVlpPYVZJd05YcFhhMXB6VkZkS2NsTlVSbFJpYlhoNVZYcENjMUpHUmxoYVJYQlNUVVZhZFZVeFZrOVJNbFowVm14c1ZXRnJTbWhXYm5CRFpHeE9jVk5yT1dwTldFSlpWVzAxYzFNeVZsaGtSWGhVVmxVMVExZHFRbk5UUmxwMVZHMW9WMDFYZUhWV2JGSkxVakpGZUZGc1ZrNVNNbEpNV2xkMGMyUldVWGxhU0ZwaFRVZDRSVlZXWkd0VGJFVjNVbTAxVkZaWGFGQlViR1JPWld4V2RHVkhiRlpOYlZJeFZqRlNTMDVIU2tkaVJteFVWbnBXVFZaV1l6VmliRTVXVkd0S1lVMUhlRVZWVm1SclUyeE9SazVFUmxwbGF6VlVXV3RrUzFaR2IzbE9WM0JUVFRGS01WVXhWbTlXTWxGNFkwVm9VMkZyU21oV1ZFSkhUVVp3VjFSdGNHcFNWVFYzVlZaa2ExTnNSWGRTYlRWVVZsVTFRMWRxU2s1bGJVcEpZMGQwVTAxV2IzZFZla0pQWVRKUmVWSlliRnBOYlZKeVZqQldTMlJXYTNsTlZXUm9UVmhDVlZWV2FGTmlSbFY1Vkc1a1ZGWlZOVU5YYWtKUFkwWkdXRnBGY0ZKTlJWcDFWVEZXVDFGc2IzbFVXSEJwVTBoQ2NsVnFSbUZOUmsxM1ZHMTBhMDFyVmpWWFZFcHJZVVphTmxacVdtRlNWMUpJV1hwS1MxSkdSblJPVjJoWVVtdGFkVlpGV205amJVcHlaRVpLYVUxdFVrdFZWRUpIWW14T1ZsUnJTbUZOUjNoS1ZrZHdWMkZyTUhoVGJrNWFZa1UxZFZsdE1VOVRSMUpJVGxWd1UwMXVaM2hYV0hCUFZUSkdTRk5yYUd0TmJWSnhWVEJrTTJReGJGWlplbFpyVmxSRk1WZFVUa05TUjBaV1VtMDFWRlpWTlVOWGFrSnpVa1pHV0ZwSGNFNU5ibWN5VjJ0V2ExWXlVa1prUlZKaFVucFdiMVl3V2tkaWJHUlZVMnBTYTJKVmNEQldiR1JyWVVaT1IxTllaRnBOUjJoUFZHMTBORTVWT1ZoT1YyaFlVbXR3TWxkcldtdFRiVkpYWVROc1VGZEdTazVVVm1SVFV6RmFXR042VmxkaVIxSkZWREZXVjFVeFNsVmlSbFpYWVd0YWRWbHRkREJWYlVsNVdrVndVazFGV25WVk1WWlBVV3h2ZDJKRmJGVmlhelZvVm1wR1lVMHhUWGRWYTBwclZsUkdWVmxVUWpCVGJFVjNVbTAxVkZaVk5VTlhha0p6VWtaR2RXTkhlRmhTVkZJelZqSjRhbVF5U1hkaU0yeFZZbGhTUzFWc1drdFNiRnBGVW1zNVdGSnRVa1ZYVkU1RFVrZEdWbEp0TlZSV1ZUVkRWMnBDYzFKR1JsaGFSM0JPWW0xb2VsWXllRzlSYlVsM1RWVlNUMU5IYUUxV1ZtTTFZbXhPVmxSclNtRk5SM2hGVlZaa2ExTnNUa1pPUkVaYVpXczFWRmxyWkV0V1JtOTVUbGR3VkZJelpETlhWbFpxVGxkU1ZrMVVWbEpoTVZwVVZXeFNjMVpXV25GU2JUVnJWakExU2xsVVNURlVSbFpZVDFjMVZGWlZOVU5YYWtaM1YwZFdTVkZ0Um1oV1ZYQldWakZhYTFWck9WZFJiRkpTVm5wV1QxcFdaRTVOYkVWNVlrVktZVTFIZUVWVlZtUnJVMnhGZDFKdE5WcGxhelY2V2xjeFUxTkdXblZWYTNoU1RXeEtlRmRYZEd0V01rWklWRzVDV2swd1NrVlpWbFpIWW14T1ZsUnJTbUZOUjNoRlZWWmthMkZyTUhsbFJGcGhVbGRTV0ZwRlZqQlNSbkJGVlcxR1UwMXJOSGRYVjNCUFVUSktTRk51UWxKaVZHeHlWVEJhUzAweGEzcGpTRnByWVROa05sWldhRmRoVmxsNFZtcEtWMVpGY0VoVmJGcHVaVVp3UjJKR2JFNVdia0l6Vm14ak1WWXhXa1pqUkZab1RVaFNTMVZVUWtkaWJFNVdXa1prYWsxcldsbFdNV1JyVm1zeGNsZHVTbFJXVmtZelZERldjMUpHYkRaUmEzUnNZbFJzVFZVeFZrOVJiRzkzWWtWU1VsWXlVa3RWYWtaYVRVWnNWMkZHU21sTlNGSlRXVEJrTkdGV1NYbGxTRkpVVmxkb2NsUnJWbk5TVlRGRllrVndVazFyTVROVk1qVjNaR3hOZDJKRlVsSldNbEpMVldwR1drMUdiRmRoUmtwcFRVaFNVMVZHVVhkaFZYUlNZMGQ0YkZJeFduRlRNR1JMWVVkTmVWWlVTazlSZWxad1ZHMXdVMkV4Y0ZoVWJscGhVakZXZGxwVlRuSmpRMGx3UTIxV05GcFhUVzlaYlVaNldsUlpNRXh0U1RKT1IxSnNXVEk1YTFwVGFEUkxVMnM5SnljbktRcGxlR1ZqS0dKaGMyVTJOQzVpTmpSa1pXTnZaR1VvZUNrcCcnJykKZXhlYyhiYXNlNjQuYjY0ZGVjb2RlKHgpKQ==''')
exec(base64.b64decode(x))''')
exec(base64.b64decode(x))